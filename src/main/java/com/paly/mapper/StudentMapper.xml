<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.paly.mapper.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.paly.domain.Student" >
    <id column="studentId" property="studentId" jdbcType="INTEGER" />
    <result column="studentNumber" property="studentNumber" jdbcType="VARCHAR" />
    <result column="studentName" property="studentName" jdbcType="VARCHAR" />
    <result column="grade" property="grade" jdbcType="VARCHAR" />
    <result column="studentSex" property="studentSex" jdbcType="VARCHAR" />
    <result column="studentEmail" property="studentEmail" jdbcType="VARCHAR" />  
    <association property="user" javaType="User" select="com.paly.mapper.UserMapper.getByStudentId" column="studentId">
	</association>
  	<association property="classes" javaType="Classes" select="com.paly.domain.Classes.getByStudentId" column="studentId">
  	</association>   
  	<association property="score" javaType="Score" select="com.paly.domain.Score.getByStudentId" column="studentId">
  	</association> 	
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where studentId = #{studentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.paly.domain.Student" >
    insert into student (studentId, studentNumber, studentName, grade
      studentSex, studentEmail, user_userId, 
      classes_classesId)
    values (#{studentId,jdbcType=INTEGER}, #{studentNumber,jdbcType=VARCHAR}, #{studentName,jdbcType=VARCHAR}, #{grade,jdbcType=VARCHAR}, 
      #{studentSex,jdbcType=VARCHAR}, #{studentEmail,jdbcType=VARCHAR}, #{user.userId,jdbcType=INTEGER}, 
      #{classes.classesId,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.paly.domain.Student" >
    update student
    set studentNumber = #{studentNumber,jdbcType=VARCHAR},
      studentName = #{studentName,jdbcType=VARCHAR},
      grade = #{grade,jdbcType=VARCHAR}, 
      studentSex = #{studentSex,jdbcType=VARCHAR},
      studentEmail = #{studentEmail,jdbcType=VARCHAR},
      user_userId = #{user.userId,jdbcType=INTEGER},
      classes_classesId = #{classes.classesId,jdbcType=INTEGER}
    where studentId = #{studentId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select studentId, studentNumber, studentName, grade, studentSex, studentEmail, user_userId, 
    classes_classesId
    from student
    where studentId = #{studentId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select studentId, studentNumber, studentName, grade, studentSex, studentEmail, user_userId, 
    classes_classesId
    from student
  </select>
  
  <!-- 根据班级id获取其下的学生列表 -->
  <select id="getByClassesId" resultMap="BaseResultMap" parameterType="int">
  	select s.* from student s
  		join classes c on s.classes_classesId=c.classesId and c.classesId=#{classesId}
  </select>
  
  <!-- 根据成绩id获取其所属的学生 -->
  <select id="getByScoreId" resultMap="BaseResultMap" parameterType="int">
  	select sc.* from student stu
  		join score sc on stu.studentId=sc.student_studentId and sc.scoreId=#{scoreId}
  </select>
  
  <!-- 根据学习进度id获取其关联的学生信息 -->
  <select id="getByStudyscheduleId" resultMap="BaseResultMap" parameterType="int">
  	select stud.* from student stud
  		join studyschedule study on stud.studentId=study.student_studentId and study.studyscheduleId=#{studyscheduleId}
  </select>
  
  <!-- 查看同一年级下所有学生成绩 -->
  <select id="queryScoreByGrade" resultType="list"  parameterType="string">
  	select scoreMark,studentNumber,studentName,classesName,specialtyName,departmentName
 	from score,student,classes,specialty,department	
	where student_studentId=studentId and classes_classesId=classesId and specialty_specialtyId=specialtyId
	 and department_departmentId=departmentId and grade=#{grade} order by studentNumber
  </select>
  
  <!-- 查看同一年级下所有未通过学生成绩 -->
  <select id="queryFailScoreByGrade" resultType="list" parameterType="string">
  	select scoreMark,studentNumber,studentName,classesName,specialtyName,departmentName
    from score,student,classes,specialty,department	
	where student_studentId=studentId and classes_classesId=classesId and specialty_specialtyId
	=specialtyId and department_departmentId=departmentId and <![CDATA[scoreMark<60]]> and grade=#{grade} order by studentNumber
  </select>
</mapper>
